%title Writing data
Spring batch支持写入的文件格式包括：文本文件、XML文件、数据库（JDBC以及ORM）。同时也支持JMS以及发送邮件等。
==数据写入概念==
在基于chunk的任务中,ItemWriter作为基本的接口,需要实现该接口.
接口的定义如下所示：

{{{ class="brush: java"
public interface ItemWriter<T> {
    void write(List<? extends T> items) throws Exception;
}
}}}

对于写入情况，可以通过设置commit-interval的值来设置每次提交的数目，下面是示例：
{{{ class="brush: xml"
<tasklet>
<chunk reader="itemReader" writer="itemWriter" commit-interval="100"/>
</tasklet>
  }}}
  
==写入文件==
支持写入多种不同的文件。
===写入普通文本文件===
spring batch写入文件的步骤如下：
# 写记录头（可选）
# 记录记录
# 写入记录的脚注（可选）

FlatFileItemWriter类可以用来写入普通文本文件，该类实现了ItemWriter接口以及其他的接口。同时该类也实现了ItemStream接口，同时遵循stream的生命周期。

FlatFileItemWriter中涉及的接口与类如下所示：
| 类型                   | 描述                                         |
| LineAggregator         | 生成对象的String表现形式                     |
| ExtractorLineAggreator | 实现LineAggregator接口用来从对象中提取区域值 |
| FieldExtractor         | 创建包含子项的数组                           |
| FlatFileHeaderCallback | 创建头注的回调函数                           |
| FlatFileFooterCallback | 创建脚注的回调函数                           |

为了能够将内容写入到文本文件中，首先需要配置的是FlatFileItemWriter，该类在XML中可以配置的属性如下所示：
| 属性                 | 类型                   | 描述                                              |
| appendAllowed        | boolean                | 是否允许在已有的文件后添加                        |
| encoding             | String                 | 文件编码，默认为UTF8                              |
| footerCallback       | FlatFileFooterCallback | 脚注回调函数                                      |
| headerCallback       | FlatFileHeaderCallback | 回调函数                                          |
| lineAggregator       | LineAggregator<T>      | 将对象转换为一行，必须属性                        |
| resource             | Resource               | 写入文件的地址                                    |
| saveState            | boolean                | 是否保存执行的中间状态，默认true                  |
| shouldDeleteIfEmpty  | boolean                | 在未写入任何内容情况下是否删除目标文件，默认false |
| shouldDeleteIfExists | boolean                | 在目标文件存在情况下是否删除，默认为true          |

示例如下：
{{{class="brush: xml"
<bean id="productItemWriter"
class="org.springframework.batch.item.file.FlatFileItemWriter">
<property name="resource" 
value="file:target/outputs/passthrough.txt"/>
<property name="lineAggregator">
<bean 
class="org.springframework.batch.item.file.transform.PassThroughLineAggregator" />
</property>
</bean>
  }}}

spring batch已实现LineAggregator接口的类如下所示：
| 类名                      | 描述                                                         |
| PassThroughLineAggregator | 仅仅只是toString()                                           |
| ExtractorLineAggregator   | 抽象类                                                       |
| DelimitedLineAggregator   | ExtractorLineAggregator的子类，默认记录分隔符号为逗号        |
| FormatterLineAggregator   | ExtractorLineAggregator的子类，使用java.util.Formatter格式化 |

使用PassThroughLineAggregator的示例如下：
{{{class="brush:xml"
<bean id="productItemWriter"
    class="org.springframework.batch.item.FlatFileItemWriter">
    <properity name="resource"
    value="file:target/file.txt">
    <property name="lineAggregator">
        <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            <properity name="fieldExtractor"
                <bean class="org.springframework.batch.item.file.transform.PassThroughFieldExtractor"/>
            </property>
        </bean>
    </property>
</bean>
  }}}
  
对于区域的读取存在两个已实现的类，分别是PassThroughFieldExtractor和BeanWrapperFieldExtractor。

可以自己实现FieldExtractor接口，只需要返回对应的对象数组即可，对象数组中包含需要返回的值。

由于DelimitedLineAggregator的默认分割符为逗号，可以通过配置文件修改其默认的分割符。示例如下：
{{{class="brush:xml"
  <bean id="productItemWriter"
class="org.springframework.batch.item.file.FlatFileItemWriter">
(...)
<property name="lineAggregator">
<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
<property name="delimiter" value="|">
<property name="fieldExtractor">
(...)
</property>
</bean>
</property>
</bean>
  }}}
  
对于固定长度分隔的记录，需要使用的lineAggregator接口为FormatterLineAggregator，具体示例如下：
{{{class="brush:xml"
<bean id="productItemWriter"
class="org.springframework.batch.item.file.FlatFileItemWriter">
<property name="resource" 
value="file:target/outputs/fixedwidth-beanwrapperextractor.txt"/>
<property name="lineAggregator">
<bean class="org.springframework.batch.item.file.transform.FormatterLineAggregator">
<property name="fieldExtractor">
<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
<property name="names" value="id,price,name" />
</bean>
</property>
<property name="format" value="%-9s%6.2f%-30s" />
</bean>
</property>
</bean>
  }}}
  
写入的文件中存在多种记录时，需要根据记录的情况来实现。书中的示例利用了反射的原理。

对于头注和脚注的加入，实现的方式不一致。
脚注需要同时设置监听器？？

===写入XML文件===
spring batch实现ItemWriter接口的类为StaxEventItemWriter，StaxEventItemWriter的属性如下所示：
| 属性                  | 类型                | 描述               |
| encoding              | String              | 文件编码，默认UTF8 |
| footerCallback        | StaxWriterCallback  |                    |
| headerCallback        | StaxWriterCallback  |                    |
| marshaller            | Marshaller          |                    |
| overwriteOutput       | boolean             |                    |
| resource              | Resource            |                    |
| rootElementAttributes | Map<String, String> |                    |
| rootTagName           | String              |                    |
| saveState             | Boolean             | 是否保存执行上下文 |
| transactional         | boolean             |                    |
| version               | String              |                    |

===写入多个文件===
使用MultiResourceItemWriter可以写入多个文件，通过设置itemCountLimitPerResource可以设置每个文件的最大记录大小。
示例如下：
{{{class="brush:xml"
<job id="writeProductsJob" xmlns="http://www.springframework.org/schema/batch">
    <step id="readWrite">
    <tasklet>
        <chunk reader="productItemReader" 
        writer="productItemWriter" 
        commit-interval="100" /> 
    </tasklet>
    </step>
</job>
<bean id="productItemWriter" class="org.springframework.batch.item.file.MultiResourceItemWriter"
scope="step">
<property name="resource" value="file:target/outputs/products-multi.xml" />
<property name="itemCountLimitPerResource" value="10000" /> 
<property name="delegate" ref="delegateWriter" /> 
</bean>
<bean id="delegateWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter"> 
(...)
</bean>
  }}}

==写入数据库==
===直接与JDBC交互===
JdbcBatchItemWriter类实现了ItemWriter接口，其可配置的属性如下：
| 属性                           | 类型                              | 描述                           |
| assertUpdates                  | boolean                           | 当更新或者删除失败时，抛出异常 |
| itemPreparedStatementSetter    | ItemPreparedStatementSetter<T>    | SQL语句中的参数为？            |
| itemSqlParameterSourceProvider | ItemSqlParameterSourceProvider<T> | SQL参数为命名参数              |
| sql                            | String                            | SQL语句                        |
示例如下：
{{{class="brush:xml"
<bean id="productItemWriter"
class="org.springframework.batch.item.database.JdbcBatchItemWriter">
<property name="assertUpdates" value="true" />
<property name="itemSqlParameterSourceProvider">
<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
</property>
<property name="sql" 
value="INSERT INTO PRODUCT (ID, NAME, PRICE) 
VALUES(:id, :name, :price)" />
<property name="dataSource" ref="dataSource" />
</bean>
  }}}
  
===用ORM的方式写入===

==复用已存在的写入逻辑==
通过ItemWriterAdapter可以复用已经存在的类。若已存在的类的参数较为复杂，可以使用类：PropertyExtractingDelegatingItemWriter来完成。

==写入到JMS==
==发送email==
==实现自定义写入方法==
==高级写入技巧==
===组合写入===
类CompositeItemWriter可以实现多个Writer的集合，示例如下：

{{{class="brush:xml"
<bean id="productItemWriter" 
class="org.springframework.batch.item.support.CompositeItemWriter">
<property name="delegates">
<list>
<ref local="delimitedProductItemWriter"/> 
<ref local="fixedWidthProductItemWriter"/> 
</list>
</property>
</bean>
<bean id="delimitedProductItemWriter"
class="org.springframework.batch.item.file.FlatFileItemWriter">
(...)
</bean>
<bean id="fixedWidthProductItemWriter"
class="org.springframework.batch.item.file.FlatFileItemWriter">
(...)
</bean>
}}}
===根据条目的内容路由===
涉及到两个类，分别是Classifier接口和BackToBackPatternClassifier，示例如下：
{{{class="brush:java"
public class ProductRouterClassifier {
    @Classifier
    public String classify(Product classifiable) {
        return classifiable.getOperation();
    }
}
  }}}
{{{class="brush:xml"
<bean id="productItemWriter" 
class="org.springframework.batch.item.support.ClassifierCompositeItemWriter"> 
<property name="classifier">
<bean class="org.springframework.batch.classify.BackToBackPatternClassifier">
<property name="routerDelegate">
<bean class="com.manning.sbia.ch06.advanced.ProductRouterClassifier" /> 
</property>
<property name="matcherMap">
<map>
<entry key="C" 
value-ref="insertJdbcBatchItemWriter" /> 
<entry key="U" 
value-ref="updateJdbcBatchItemWriter" />
<entry key="D" 
value-ref="deleteJdbcBatchItemWriter" />
</map>
</property>
</bean>
</property>
</bean>
<bean id="insertJdbcBatchItemWriter">
(...)
<property name="sql"
value="INSERT INTO PRODUCT(ID,NAME,PRICE) VALUES(:id,:name,:price)" />
</bean>
}}}
